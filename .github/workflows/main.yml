name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: x64
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv pytest
      - name: Setup Virtual env
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Activate and Install Dependencies into Virtual env
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt
          pip install pytest
      - name: Set up environment variables
        run: |
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
          echo "ONE_INCH_API_KEY=${{ secrets.ONE_INCH_API_KEY }}" >> $GITHUB_ENV
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> $GITHUB_ENV
          echo "PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}" >> $GITHUB_ENV
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}" >> $GITHUB_ENV
      - name: Build and Run Test
        run: |
          source venv/bin/activate
          python -m pytest -v test_api.py
        working-directory: ./
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          ONE_INCH_API_KEY: ${{ secrets.ONE_INCH_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
      - name: Create Dependencies Layer
        run: |
          cd ./venv/lib/python3.9/site-packages
          zip -r9 ../../../../dependencies.zip .
      - name: Upload Dependencies Layer to AWS
        run: |
          aws lambda publish-layer-version \
            --layer-name my-dependencies-layer \
            --description "Python dependencies for my Lambda function" \
            --zip-file fileb://dependencies.zip \
            --compatible-runtimes python3.9
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Create Lambda Function Code Zip
        run: |
          zip -r9 lambda_function.zip lambda_function.py
      - name: Upload Lambda Function Code to S3
        run: |
          aws s3 cp lambda_function.zip s3://crypto-swaptest/lambda_function.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name serverless \
            --s3-bucket crypto-swaptest \
            --s3-key lambda_function.zip
          aws lambda update-function-configuration \
            --function-name serverless \
            --layers arn:aws:lambda:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:layer:my-dependencies-layer:1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}