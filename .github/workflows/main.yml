name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: x64
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv pytest
      - name: Setup Virtual env
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Activate and Install Dependencies into Virtual env
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt
          pip install pytest
      - name: Set up environment variables
        run: |
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
          echo "ONE_INCH_API_KEY=${{ secrets.ONE_INCH_API_KEY }}" >> $GITHUB_ENV
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> $GITHUB_ENV
          echo "PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}" >> $GITHUB_ENV
      - name: Build and Run Test
        run: |
          source venv/bin/activate
          python -m pytest -v test_api.py
        working-directory: ./
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          ONE_INCH_API_KEY: ${{ secrets.ONE_INCH_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./venv/lib/python3.9/site-packages
          zip -r9 ../../../../api.zip .
      - name: Debug Check api.zip
        run: |
          if [ -f "api.zip" ]; then
            echo "api.zip exists"
            unzip -l api.zip
          else
            echo "api.zip does not exist"
          fi
      - name: Add App to Zipfile
        run: |
          zip -g api.zip -r api
          for module in query_engine.py data_fetcher.py vector_store.py swap_executor.py; do
            if [ -f "$module" ]; then
              zip -g api.zip "$module"
            fi
          done
          if [ -f "requirements.txt" ]; then
            zip -g api.zip requirements.txt
          fi
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: api.zip
  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v3
        with:
          name: api
      - name: Upload to S3
        run: aws s3 cp api.zip s3://crypto-swaptest/api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name serverless --s3-bucket crypto-swaptest --s3-key api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          ONE_INCH_API_KEY: ${{ secrets.ONE_INCH_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}